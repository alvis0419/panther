#!/bin/sh /etc/rc.common
# Copyright (C) 2013 Montage Inc.

START=42

. /etc/cdb.sh
. /etc/if.sh

config_get op_work_mode op_work_mode
if [ ${op_work_mode} = 9 ]; then
    exit 0
fi

conntrack -F

config_get fw_macf_mode fw_macf_mode
config_get fw_urlf_mode fw_urlf_mode
config_get fw_clientf_mode fw_clientf_mode
config_get fw_enable fw_enable
config_get fw_drop_wan_ping fw_drop_wan_ping
config_get fw_drop_lan_ping fw_drop_lan_ping
#config_get fw_drop_netbios fw_drop_netbios
#config_get fw_drop_tcp_null fw_drop_tcp_null
#config_get fw_drop_ident fw_drop_ident
#config_get fw_drop_icmp_flood fw_drop_icmp_flood
#config_get fw_drop_sync_flood fw_drop_sync_flood
#config_get fw_drop_land_attack fw_drop_land_attack
#config_get fw_drop_snork fw_drop_snork
#config_get fw_drop_udp_ploop fw_drop_udp_ploop
#config_get fw_drop_ip_spoof fw_drop_ip_spoof
#config_get fw_drop_smurf fw_drop_smurf
#config_get fw_drop_ping_death fw_drop_ping_death
#config_get fw_drop_icmp_resp fw_drop_icmp_resp
#config_get fw_drop_port_scan fw_drop_port_scan
#config_get fw_drop_frag fw_drop_frag


FORWARD_DROP=0

if [ -f "/lib/wdk/nf" ] ; then
	. /lib/wdk/nf
else
	echo "ERROR: Script Lost"
fi
if [ $IPTABLES_MODE = 1 ]; then
	IPTABLES_PREPARE=do_iptables_prepare
	IPTABLES_BIN=do_iptables_rule
	IPTABLES_COMMIT=do_iptables_commit
	IPTABLES_DELETE=do_iptables_delete
else
	IPTABLES_BIN=do_iptables
	IPTABLES_DELETE=filter_clear_all
fi

get_ifconfig_parm () {
	local interface parm
	interface="$1"; parm="$2"; shift 2

	for s in `ifconfig $interface`; do
		case $s in
			$parm:*) echo "${s#*:}"; return;;
			*);;
		esac
	done
}

get_time () {
	timestart=`echo $1 | awk -F"-" '{ printf $1 }'`
	timeend=`echo $1 |awk -F"-" '{ printf $2 }'`
	timestart=`expr $timestart / 3600`":00"
	timeend=`expr $timeend / 3600`":00"
	if [ "$timestart" = "24:00" ]; then
		timestart="23:59"
	fi
	if [ "$timeend" = "24:00" ]; then
		timeend="23:59"
	fi
}

get_day () {
	local day=$1
	local i=0
	for i in 64 32 16 8 4 2 1
	do
		tmp=`expr $day - $i`
		if [ "$tmp" -ge 0 ]; then
			day=$tmp;
		fi
		case $i in
			64) if [ "$tmp" -ge 0 ]; then DAYS="Sat,"; fi ;;
			32) if [ "$tmp" -ge 0 ]; then DAYS=$DAYS"Fri,"; fi;;
			16) if [ "$tmp" -ge 0 ]; then DAYS=$DAYS"Thu,"; fi;;
			8)	if [ "$tmp" -ge 0 ]; then DAYS=$DAYS"Wed,"; fi;;
			4)	if [ "$tmp" -ge 0 ]; then DAYS=$DAYS"Tue,"; fi;;
			2)	if [ "$tmp" -ge 0 ]; then DAYS=$DAYS"Mon,"; fi;;
			1)	if [ "$tmp" -ge 0 ]; then DAYS=$DAYS"Sun"; fi;;
		esac
	done
	#return $DAY
}

filter_clear_all () {
	$IPTABLES_BIN -F INPUT_RULE
	$IPTABLES_BIN -D INPUT -j INPUT_RULE
	$IPTABLES_BIN -X INPUT_RULE
	$IPTABLES_BIN -F OUTPUT_RULE
	$IPTABLES_BIN -D OUTPUT -j OUTPUT_RULE
	$IPTABLES_BIN -X OUTPUT_RULE
	$IPTABLES_BIN -F FORWARD_RULE
	$IPTABLES_BIN -D FORWARD -j FORWARD_RULE
	$IPTABLES_BIN -X FORWARD_RULE

	$IPTABLES_BIN -F SYSLOG
	$IPTABLES_BIN -D INPUT -j SYSLOG
	$IPTABLES_BIN -D FORWARD -j SYSLOG
	$IPTABLES_BIN -D OUTPUT -j SYSLOG
	$IPTABLES_BIN -X SYSLOG
}

drop_mac_access () {
	for line in `seq 1 20`
		do
			line=fw_macf$line
			config_get line $line
			[ "$line" == "!ERR" -o "$line" == "" ] && break
			line=`echo $line | sed -e 's/&/;/g'`
			# tricky
			eval $line
			if [ $en = "1" ]; then
#				$IPTABLES_BIN -A INPUT_RULE -m mac --mac-source $smac -j DROP
				$IPTABLES_BIN -A FORWARD_RULE -m mac --mac-source $smac -j DROP
			fi
		done
}

accept_mac_access () {
	for line in `seq 1 20`
		do
			line=fw_macf$line
			config_get line $line
			[ "$line" == "!ERR" -o "$line" == "" ] && break
			line=`echo $line | sed -e 's/&/;/g'`
			# tricky
			eval $line
			if [ $en = "1" ]; then
#				$IPTABLES_BIN -A INPUT_RULE -m mac --mac-source $smac -j ACCEPT
				$IPTABLES_BIN -A FORWARD_RULE -m mac --mac-source $smac -j ACCEPT
			fi
		done
}

drop_urlf_access () {
	for line in `seq 1 28`
		do
			line=fw_urlf$line
			config_get line $line
			[ "$line" == "!ERR" -o "$line" == "" ] && continue
			line=`echo $line | sed -e 's/&/;/g'`
			# tricky
			eval $line
			tmp=`echo $str | sed s/"http:\\\/\\\/"//g`
			if [ $en = "1" ]; then
				if [ -z $type ]; then
					$IPTABLES_BIN -A FORWARD_RULE -p tcp -m iprange --src-range $sip -m webstr --url "$tmp" -j REJECT --reject-with tcp-reset
				elif [ $type = "url" ]; then
					$IPTABLES_BIN -A FORWARD_RULE -p tcp -m iprange --src-range $sip -m webstr --url "$tmp" -j REJECT --reject-with tcp-reset
				elif [ $type = "host" ]; then
					$IPTABLES_BIN -A FORWARD_RULE -p tcp -m iprange --src-range $sip -m webstr --host "$tmp" -j REJECT --reject-with tcp-reset
				fi
			fi
		done
}

accept_urlf_access () {
	for line in `seq 1 20`
		do
			line=fw_urlf$line
			config_get line $line
			[ "$line" == "!ERR" -o "$line" == "" ] && continue
			line=`echo $line | sed -e 's/&/;/g'`
			# tricky
			eval $line
			# str1:domain str2:path
			tmp=`echo $str | sed s/"http:\\\/\\\/"//g`
			if [ $en = "1" ]; then
				if [ -z $type ]; then
					$IPTABLES_BIN -A FORWARD_RULE -p tcp -m iprange --src-range $sip -m webstr --url "$tmp" -j ACCEPT
					$IPTABLES_BIN -A FORWARD_RULE -p tcp -m iprange --src-range $sip -m webstr ! --url "$tmp" -j REJECT --reject-with tcp-reset
					$IPTABLES_BIN -A FORWARD_RULE -p tcp --dport 80 -m iprange ! --src-range $sip -j REJECT --reject-with tcp-reset
				elif [ $type = "url" ]; then
					$IPTABLES_BIN -A FORWARD_RULE -p tcp -m iprange --src-range $sip -m webstr --url "$tmp" -j ACCEPT
					$IPTABLES_BIN -A FORWARD_RULE -p tcp -m iprange --src-range $sip -m webstr ! --url "$tmp" -j REJECT --reject-with tcp-reset
					$IPTABLES_BIN -A FORWARD_RULE -p tcp --dport 80 -m iprange ! --src-range $sip -j REJECT --reject-with tcp-reset
				elif [ $type = "host" ]; then
					$IPTABLES_BIN -A FORWARD_RULE -p tcp -m iprange --src-range $sip -m webstr --host "$tmp" -j ACCEPT
					$IPTABLES_BIN -A FORWARD_RULE -p tcp -m iprange --src-range $sip -m webstr ! --host "$tmp" -j REJECT --reject-with tcp-reset
					$IPTABLES_BIN -A FORWARD_RULE -p tcp --dport 80 -m iprange ! --src-range $sip -j REJECT --reject-with tcp-reset
				fi

			fi
		done

#	for line in `seq 1 20`
#		do
#			line=fw_urlf$line
#			config_get line $line
#			[ "$line" == "!ERR" -o "$line" == "" ] && continue
#			line=`echo $line | sed -e 's/&/;/g'`
#			# tricky
#			eval $line
#			# str1:domain str2:path
#			tmp=`echo $str | sed s/"http:\\\/\\\/"//g`
#			if [ $en = "1" ]; then
#				if [ -z $type ]; then
#					$IPTABLES_BIN -A FORWARD_RULE -p tcp --dport 80 -m iprange --src-range $sip -m webstr ! --url "$tmp"  -j REJECT --reject-with tcp-reset
#				elif [ $type = "url" ]; then
#					$IPTABLES_BIN -A FORWARD_RULE -p tcp --dport 80 -m iprange --src-range $sip -m webstr ! --url "$tmp" -j REJECT --reject-with tcp-reset
#				elif [ $type = "host" ]; then
#					$IPTABLES_BIN -A FORWARD_RULE -p tcp --dport 80 -m iprange --src-range $sip -m webstr ! --host "$tmp" -j REJECT --reject-with tcp-reset
#				fi
#			fi
#		done
}

drop_client_access () {
	local date
	for line in `seq 1 20`
		do
			local cmd=""
			local sp=""
			local dp=""
			line=fw_clientf$line
			config_get line $line
			[ "$line" == "!ERR" -o "$line" == "" ] && break
			line=`echo $line | sed -e 's/&/;/g'`
			# tricky
			eval $line
			sp=`echo $sp | sed -e 's/-/:/g'`
			dp=`echo $dp | sed -e 's/-/:/g'`
			if [ "$en" = "1" ]; then
				[ -z $sip ] || cmd="-m iprange --src-range $sip "
				[ -z $dip ] || cmd=${cmd}"-m iprange --dst-range $dip "
				[ -z $sp ] || cmd=${cmd}"--sport $sp "
				[ -z $dp ] || cmd=${cmd}"--dport $dp "
				if [ "$schen" = "1" ]; then
					get_time $time
					get_day $day
					timstr="-m time --timestart $timestart --timestop $timeend --weekdays $DAYS"
					if [ "$prot" = "tcp/udp" ]; then
#						$IPTABLES_BIN -A INPUT_RULE -p tcp --dport $dp -m iprange --src-range $sip $timstr -j DROP
#						$IPTABLES_BIN -A INPUT_RULE -p udp --dport $dp -m iprange --src-range $sip $timstr -j DROP
						$IPTABLES_BIN -A FORWARD_RULE -p tcp $cmd $timstr -j DROP
						$IPTABLES_BIN -A FORWARD_RULE -p udp $cmd $timstr -j DROP
					else
#						$IPTABLES_BIN -A INPUT_RULE -p $prot --dport $dp -m iprange --src-range $sip $timstr -j DROP
						$IPTABLES_BIN -A FORWARD_RULE -p $prot $cmd $timstr -j DROP
					fi
				else
					if [ "$prot" = "tcp/udp" ]; then
#						$IPTABLES_BIN -A INPUT_RULE -p tcp --dport $dp -m iprange --src-range $sip -j DROP
#						$IPTABLES_BIN -A INPUT_RULE -p udp --dport $dp -m iprange --src-range $sip -j DROP
						$IPTABLES_BIN -A FORWARD_RULE -p tcp $cmd -j DROP
						$IPTABLES_BIN -A FORWARD_RULE -p udp $cmd -j DROP
					else
#						$IPTABLES_BIN -A INPUT_RULE -p $prot --dport $dp -m iprange --src-range $sip -j DROP
						$IPTABLES_BIN -A FORWARD_RULE -p $prot $cmd -j DROP
					fi
				fi
			fi
		done
}

accept_client_access () {
	local date
	for line in `seq 1 20`
		do
			local cmd=""
			local sp=""
			local dp=""
			line=fw_clientf$line
			config_get line $line
			[ "$line" == "!ERR" -o "$line" == "" ] && break
			line=`echo $line | sed -e 's/&/;/g'`
			# tricky
			eval $line
			sp=`echo $sp | sed -e 's/-/:/g'`
			dp=`echo $dp | sed -e 's/-/:/g'`
			if [ "$en" = "1" ]; then
				[ -z $sip ] || cmd="-m iprange --src-range $sip "
				[ -z $dip ] || cmd=${cmd}"-m iprange --dst-range $dip "
				[ -z $sp ] || cmd=${cmd}"--sport $sp "
				[ -z $dp ] || cmd=${cmd}"--dport $dp "
				if [ "$schen" = "1" ]; then
					get_time $time
					get_day $day
					timstr="-m time --timestart $timestart --timestop $timeend --weekdays $DAYS"
					if [ "$prot" = "tcp/udp" ]; then
						# HXXX ONLY DROP FORWARDING
#						$IPTABLES_BIN -A INPUT_RULE -p tcp --dport $dp -m iprange --src-range $sip $timstr -j ACCEPT
#						$IPTABLES_BIN -A INPUT_RULE -p udp --dport $dp -m iprange --src-range $sip $timstr -j ACCEPT
						$IPTABLES_BIN -A FORWARD_RULE -p tcp --dport $cmd $timstr -j ACCEPT
						$IPTABLES_BIN -A FORWARD_RULE -p udp --dport $cmd $timstr -j ACCEPT
					else
#						$IPTABLES_BIN -A INPUT_RULE -p $prot --dport $dp -m iprange --src-range $sip $timstr -j ACCEPT
						$IPTABLES_BIN -A FORWARD_RULE -p $prot $cmd $timstr -j ACCEPT
					fi
				else
					if [ "$prot" = "tcp/udp" ]; then
#						$IPTABLES_BIN -A INPUT_RULE -p tcp --dport $dp -m iprange --src-range $sip -j ACCEPT
#						$IPTABLES_BIN -A INPUT_RULE -p udp --dport $dp -m iprange --src-range $sip -j ACCEPT
						$IPTABLES_BIN -A FORWARD_RULE -p tcp $cmd -j ACCEPT
						$IPTABLES_BIN -A FORWARD_RULE -p udp $cmd -j ACCEPT
					else
#						$IPTABLES_BIN -A INPUT_RULE -p $prot --dport $dp -m iprange --src-range $sip -j ACCEPT
						$IPTABLES_BIN -A FORWARD_RULE -p $prot $cmd -j ACCEPT
					fi
				fi
			fi
		done
}

filter_drop_icmp () {
	local interface=$1
	$IPTABLES_BIN -A INPUT_RULE -i $interface -p icmp --icmp-type 8 -j DROP
#	$IPTABLES_BIN -A FORWARD_RULE -i $interface -p icmp --icmp-type 8 -j DROP
	$IPTABLES_BIN -A SYSLOG -i $interface -p icmp --icmp-type 8 -j LOG --log-prefix \"[DROP icmp]:\" --log-level 1
}


filter_drop_netbios () {
	$IPTABLES_BIN -A INPUT_RULE -p tcp -m multiport --destination-port 135,136,137,138,139,455 -j DROP
	$IPTABLES_BIN -A INPUT_RULE -p udp -m multiport --destination-port 135,136,137,138,139,455 -j DROP
#	$IPTABLES_BIN -A SYSLOG -p tcp -m multiport --destination-port 135,136,137,138,139,455 -j LOG --log-prefix \"[DROP netbios]:\" --log-level 1
#	$IPTABLES_BIN -A SYSLOG -p udp -m multiport --destination-port 135,136,137,138,139,455 -j LOG --log-prefix \"[DROP netbios]:\" --log-level 1
}

filter_drop_tcpnull () {
	$IPTABLES_BIN -A INPUT_RULE -p tcp --tcp-flags ALL NONE -j DROP
#	$IPTABLES_BIN -A SYSLOG -p tcp --tcp-flags ALL NONE -j LOG --log-prefix \"[DROP tcpnull]:\" --log-level 1
}

filter_drop_ident () {
	$IPTABLES_BIN -A INPUT_RULE -p tcp --dport 113 -j DROP
#	$IPTABLES_BIN -A SYSLOG -p tcp --dport 113 -j LOG --log-prefix \"[DROP ident]:\" --log-level 1
}

filter_drop_icmp_flood () {
	config fw_icmpf_rate fw_icmpf_rate
	$IPTABLES_BIN -A INPUT_RULE -p icmp --icmp-type echo-request -m limit --limit $fw_icmpf_rate/second -j ACCEPT
	$IPTABLES_BIN -A INPUT_RULE -p icmp --icmp-type echo-request -j LOG --log-prefix \"[DROP icmp flooding]:\" --log-level 1
	$IPTABLES_BIN -A INPUT_RULE -p icmp --icmp-type echo-request -j DROP
}

filter_drop_sync_flood () {
	config_get fw_synf_rate fw_synf_rate
	$IPTABLES_BIN -A INPUT_RULE -p tcp --syn -m limit --limit $fw_synf_rate/second --limit-burst 100 -j ACCEPT
	$IPTABLES_BIN -A INPUT_RULE -p tcp --syn -j LOG --log-prefix \"[DROP sync flooding]:\" --log-level 1
	$IPTABLES_BIN -A INPUT_RULE -p tcp --syn -j DROP
}

filter_drop_land_attack () {
	wanip=`get_ifconfig_parm $WANIF addr`
	lanip=`get_ifconfig_parm $LANIF addr`
	[ -n "$wanip" ] && $IPTABLES_BIN -A INPUT_RULE -s $wanip -d $wanip -p tcp --tcp-flags SYN SYN -j DROP
	[ -n "$lanip" ] && $IPTABLES_BIN -A INPUT_RULE -s $lanip -d $lanip -p tcp --tcp-flags SYN SYN -j DROP
#	[ -n "$wanip" ] && $IPTABLES_BIN -A SYSLOG -s $wanip -d $wanip -p tcp --tcp-flags SYN SYN -j LOG --log-prefix \"[DROP lanattack]:\" --log-level 1
#	[ -n "$lanip" ] && $IPTABLES_BIN -A SYSLOG -s $lanip -d $lanip -p tcp --tcp-flags SYN SYN -j LOG --log-prefix \"[DROP lanattack]:\" --log-level 1
}


filter_drop_snork () {
	$IPTABLES_BIN -A INPUT_RULE -p udp --sport 7 --dport 135 -j DROP
	$IPTABLES_BIN -A INPUT_RULE -p udp --sport 19 --dport 135 -j DROP
	$IPTABLES_BIN -A INPUT_RULE -p udp --sport 135 --dport 135 -j DROP
#	$IPTABLES_BIN -A SYSLOG -p udp --sport 7 --dport 135 -j LOG --log-prefix \"[DROP snork]:\" --log-level 1
#	$IPTABLES_BIN -A SYSLOG -p udp --sport 19 --dport 135 -j LOG --log-prefix \"[DROP snork]:\" --log-level 1
#	$IPTABLES_BIN -A SYSLOG -p udp --sport 135 --dport 135 -j LOG --log-prefix \"[DROP snork]:\" --log-level 1
}


filter_drop_udp_ploop () {
	$IPTABLES_BIN -A INPUT_RULE -p udp -m multiport --source-port 7,17,19 -m multiport --destination-port 7,17,19 -j DROP
#	$IPTABLES_BIN -A SYSLOG -p udp -m multiport --source-port 7,17,19 -m multiport --destination-port 7,17,19 -j LOG --log-prefix \"[DROP UDP port loop]:\" --log-level 1
}

filter_drop_ip_spoof () {
	local lannet
	config_get lan_ip lan_ip
	lannet=`echo $lan_ip | awk -F"." '{ printf $1"."$2"."$3".0" }'`
	$IPTABLES_BIN -A INPUT_RULE -s $lannet/24 -i $WANIF -j DROP
#	$IPTABLES_BIN -A SYSLOG -s $lannet/24 -i $WANIF -j LOG --log-prefix \"[DROP ip spoofing]:\" --log-level 1
}

filter_drop_ping_death () {
	$IPTABLES_BIN -A INPUT_RULE -p icmp -m length --length 65535 -j DROP
#	$IPTABLES_BIN -A SYSLOG -p icmp -m length --length 65535 -j LOG --log-prefix \"[DROP ping death]:\" --log-level 1
}

filter_drop_icmp_err () {
	$IPTABLES_BIN -A OUTPUT_RULE -p icmp --icmp-type 3 -j DROP
#	$IPTABLES_BIN -A SYSLOG -p icmp --icmp-type 3 -j LOG --log-prefix \"[DROP icmp error]:\" --log-level 1
}

filter_drop_port_scan () {
	$IPTABLES_BIN -A INPUT_RULE -p tcp --tcp-flags ALL URG,PSH,FIN -j DROP
	$IPTABLES_BIN -A INPUT_RULE -p tcp --tcp-flags ALL URG,ACK,RST,SYN,FIN -j DROP
	$IPTABLES_BIN -A INPUT_RULE -p tcp --tcp-flags ALL NONE -j DROP
	$IPTABLES_BIN -A INPUT_RULE -p tcp --tcp-flags RST,SYN RST,SYN -j DROP
	$IPTABLES_BIN -A INPUT_RULE -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP

	$IPTABLES_BIN -A FORWARD_RULE -p tcp --tcp-flags ALL URG,PSH,FIN -j DROP
	$IPTABLES_BIN -A FORWARD_RULE -p tcp --tcp-flags ALL URG,ACK,RST,SYN,FIN -j DROP
	$IPTABLES_BIN -A FORWARD_RULE -p tcp --tcp-flags ALL NONE -j DROP
	$IPTABLES_BIN -A FORWARD_RULE -p tcp --tcp-flags RST,SYN RST,SYN -j DROP
	$IPTABLES_BIN -A FORWARD_RULE -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP

	#$IPTABLES_BIN -A INPUT_RULE -m state --state RELATED,ESTABLISHED -j ACCEPT

#	$IPTABLES_BIN -A OUTPUT_RULE -p tcp --tcp-flags ACK,RST ACK,RST -j DROP
#	$IPTABLES_BIN -A OUTPUT_RULE -p icmp --icmp-type 3/3 -j DROP
#	$IPTABLES_BIN -A SYSLOG -p tcp --tcp-flags ACK,RST ACK,RST -j LOG --log-prefix \"[DROP port scan]:\" --log-level 1
}

# main
#filter_clear_all || err=1

timestart=0
timeend=0
DAYS=""

fw_setup () {
	$IPTABLES_BIN -N INPUT_RULE
	$IPTABLES_BIN -A INPUT -j INPUT_RULE
	$IPTABLES_BIN -N FORWARD_RULE
	$IPTABLES_BIN -A FORWARD -j FORWARD_RULE
	$IPTABLES_BIN -N OUTPUT_RULE
	$IPTABLES_BIN -A OUTPUT -j OUTPUT_RULE
}

syslog_setup () {
	$IPTABLES_BIN -N SYSLOG
	$IPTABLES_BIN -I INPUT 1 -j SYSLOG
	$IPTABLES_BIN -I FORWARD 1 -j SYSLOG
	$IPTABLES_BIN -I OUTPUT 1 -j SYSLOG
}
start () {
	$IPTABLES_PREPARE
	# mac filter
	fw_setup
	if [ "$fw_macf_mode" != "0" ]; then
		if [ "$fw_macf_mode" = "1" ]; then
			drop_mac_access
		else
			accept_mac_access
			FORWARD_DROP=1
		fi
	fi

	# url filter
	if [ "$fw_urlf_mode" != "0" ]; then
		if [ "$fw_urlf_mode" = "1" ]; then
			drop_urlf_access
		else
			accept_urlf_access
		fi
	fi

	# client filter
	if [ "$fw_clientf_mode" != "0" ]; then
		if [ "$fw_clientf_mode" = "1" ]; then
			drop_client_access
		else
			accept_client_access
			FORWARD_DROP=1
		fi
	fi

	if [ ${FORWARD_DROP} = "1" ]; then
		$IPTABLES_BIN -I FORWARD_RULE 1 -m state --state RELATED,ESTABLISHED -j ACCEPT
		$IPTABLES_BIN -A FORWARD_RULE -j DROP
	fi


	#hacker
	if [ "$fw_enable" = "1" ]; then
		syslog_setup
		if [ "$fw_drop_wan_ping" = "1" ]; then
			filter_drop_icmp $WANIF
		fi
		if [ "$fw_drop_lan_ping" = "1" ]; then
			filter_drop_icmp "$LANIF"
		fi
#		if [ "$fw_drop_netbios" = "1" ]; then
#			filter_drop_netbios
#		fi
#		if [ "$fw_drop_tcp_null" = "1" ]; then
#			filter_drop_tcpnull
#		fi
#		if [ "$fw_drop_ident" = "1" ]; then
#			filter_drop_ident
#		fi
#		if [ "$fw_drop_icmp_flood" = "1" ]; then
#			filter_drop_icmp_flood
#		fi
#		if [ "$fw_drop_sync_flood" = "1" ]; then
#			filter_drop_sync_flood
#		fi
#		if [ "$fw_drop_land_attack" = "1" ]; then
#			filter_drop_land_attack
#		fi
#		if [ "$fw_drop_snork" = "1" ]; then
#			filter_drop_snork
#		fi
#		if [ "$fw_drop_udp_ploop" = "1" ]; then
#			filter_drop_udp_ploop
#		fi
#		if [ "$fw_drop_ip_spoof" = "1" ]; then
#			filter_drop_ip_spoof
#		fi
#		if [ "$fw_drop_smurf" = "1" ]; then
#			echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts
#		else
#			echo 0 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts
#		fi
#		if [ "$fw_drop_ping_death" = "1" ]; then
#			filter_drop_ping_death
#		fi
#		if [ "$fw_drop_icmp_resp" = "1" ]; then
#			filter_drop_icmp_err
#		fi
#		if [ "$fw_drop_port_scan" = "1" ]; then
#			filter_drop_port_scan
#		fi
#		if [ "$fw_drop_frag" = "1" ]; then
#			echo 1 > /proc/frag_drop
#		else
#			echo 0 > /proc/frag_drop
#		fi
	fi
	$IPTABLES_COMMIT
}

stop () {
	$IPTABLES_DELETE
}

return $err
